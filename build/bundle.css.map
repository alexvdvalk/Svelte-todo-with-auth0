{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Todo.svelte",
    "TodoOverview.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { deleteTodoID, todoStore, toggleLoading } from \"./todoList\";\r\nexport let id;\r\nconst deleteTodo = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    toggleLoading(true);\r\n    try {\r\n        yield deleteTodoID($todoStore[id].id);\r\n        $todoStore.splice(id, 1);\r\n        $todoStore = $todoStore;\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        toggleLoading(false);\r\n    }\r\n});\r\nconst toggleComplete = () => {\r\n    // toggleCompleteStatus(id);\r\n    $todoStore[id].toggleComplete();\r\n    $todoStore = $todoStore;\r\n};\r\n</script>\r\n\r\n<style>\r\n  .status {\r\n    width: 16px;\r\n    margin-right: 15px;\r\n  }\r\n</style>\r\n\r\n<!-- HTML -->\r\n<!-- <div class=\"row\"> -->\r\n<div class=\"d-flex justify-content-between align-items-center list-group-item\">\r\n  <div class=\"col-sm-8 align-items-center flex-grow-1 w-100\">\r\n    {#if $todoStore[id].complete}\r\n      <!-- <div> -->\r\n      <i\r\n        class=\"fas fa-check-circle text-success status\"\r\n        on:click={toggleComplete} />\r\n      <!-- </div> -->\r\n    {:else}\r\n      <!-- <div style=\"width:16px;\"> -->\r\n      <i class=\"far fa-square status\" on:click={toggleComplete} />\r\n      <!-- </div> -->\r\n    {/if}\r\n\r\n    {$todoStore[id].title}\r\n  </div>\r\n\r\n  <!-- <div class=\"col align-items-center\">Complete: {todo.complete}</div> -->\r\n\r\n  <div class=\"col\">\r\n    <button\r\n      type=\"button\"\r\n      class=\"close\"\r\n      aria-label=\"Close\"\r\n      on:click={deleteTodo}>\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n</div>\r\n<!-- </div>\r\n</div> -->\r\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { onMount } from \"svelte\";\r\nimport TodoForm from \"./TodoForm.svelte\";\r\nimport TodoList from \"./TodoList.svelte\";\r\nimport { todoStore, getTodosFromServer } from \"./todoList\";\r\nlet loading;\r\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    loading = true;\r\n    try {\r\n        $todoStore = yield getTodosFromServer();\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n    finally {\r\n        loading = false;\r\n    }\r\n}));\r\n</script>\r\n\r\n<style>\r\n  .topSpace {\r\n    margin-top: 35px;\r\n  }\r\n</style>\r\n\r\n{#if loading}\r\n  <div class=\"d-flex justify-content-center topSpace\">\r\n    <div class=\"spinner-border\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n{/if}\r\n{#if !loading}\r\n  <TodoForm />\r\n  <TodoList />\r\n{/if}\r\n"
  ],
  "names": [],
  "mappings": "AAiCE,OAAO,cAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,IAAI,AACpB,CAAC;ACPD,SAAS,cAAC,CAAC,AACT,UAAU,CAAE,IAAI,AAClB,CAAC"
}